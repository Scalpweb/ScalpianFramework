<?php

class BuildDatabaseCommandLineTool implements ICommandLineTool
{

	const DATABASE_XML_PREFIX = 'schema';

	static public $avoid_confirmation = false;
	static public $force_one = '';

	public function execute($option)
	{
		if (!static::$avoid_confirmation && !CommandLineHandler::askYesNo("Are you sure you want to build databases schema ? It will erase the content of your databases entirely."))
		{
			CommandLineHandler::line("Leaving...");
			return;
		}

		// Finding all databases
		$databases = Database::findDatabases();

		CommandLineHandler::line("");
		CommandLineHandler::line("");
		CommandLineHandler::line("====================================");
		CommandLineHandler::line("Database Builder");
		CommandLineHandler::line("====================================");
		CommandLineHandler::line("");
		CommandLineHandler::line("");


		CommandLineHandler::line("Databases found: " . sizeof($databases));
		CommandLineHandler::line("");
		foreach ($databases as $db)
		{
			try
			{
				if (static::$force_one === '' || static::$force_one === $db)
				{
					$schema = new SimpleXMLElement(Database::getSchemaFileContent($db));
					FileSystem::mkdir(ORION_MODELS_DIR . '/' . $db . '/base');
					FileSystem::mkdir(ORION_MODELS_DIR . '/' . $db . '/export');
					FileSystem::mkdir(ORION_MODELS_DIR . '/' . $db . '/fixture');

					$this->createDatabaseClasses($schema, $db);
				}
			} catch (Exception $e)
			{
				throw(new IncompatibleSchemaFileException("The database schema file for the " . $db . " database as an incompatible format. Exception: " . $e));
			}

			try
			{
				if (static::$force_one === '' || static::$force_one === $db)
					$this->createDatabaseSchema($db);
			} catch (Exception $e)
			{
				throw(new QueryExecutionException("Error while procession database creation. Exception: " . $e));
			}
		}
		CommandLineHandler::line("");
		CommandLineHandler::line("Finished");
		CommandLineHandler::line("");
	}

	/**
	 * Create database schema
	 * @param $db
	 */
	private function createDatabaseSchema($db)
	{
		CommandLineHandler::line("", 1);
		CommandLineHandler::line("Executing queries...", 1);
		CommandLineHandler::line("", 1);
		$classname = ucfirst($db) . 'Database';
		$object = new $classname();
		$object->createDatabase(true);
	}

	/**
	 * Creates php classes for a given database
	 * @param $schema
	 * @param $db
	 */
	private function createDatabaseClasses($schema, $db)
	{
		CommandLineHandler::line("Creating php class for database: " . ucfirst($db));

		if (FileSystem::checkFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $db . 'databasebase.php'))
			FileSystem::deleteFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $db . 'databasebase.php');

		$content = OrionTools::linef('<?php');
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('/**');
		$content .= OrionTools::linef('* This file has been auto-generated by Orion ORM');
		$content .= OrionTools::linef('* WARNING : Please do not edit or erase it');
		$content .= OrionTools::linef('*/');
		$content .= OrionTools::linef('abstract class ' . ucfirst($db) . 'DatabaseBase extends Database');
		$content .= OrionTools::linef('{');
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('public function __construct()', 1);
		$content .= OrionTools::linef('{', 1);
		$content .= OrionTools::linef('parent::__construct("' . addslashes($db) . '", "' . addslashes($schema->host) . '", "' . addslashes($schema->user->username) . '", "' . addslashes($schema->user->password) . '", "' . (isset($schema->port) ? addslashes($schema->port) : '') . '", "' . (isset($schema->charset) ? addslashes($schema->charset) : '') . '", "' . (isset($schema->collate) ? addslashes($schema->collate) : '') . '");', 2);
		$content .= OrionTools::linef('}', 1);
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('public function init()', 1);
		$content .= OrionTools::linef('{', 1);
		foreach ($schema->tables->table as $table)
		{
			$content .= OrionTools::linef('$this->addTable(new ' . ucfirst($table->name) . 'Table());', 2);
			$this->createTableClasses($table, $db);
		}
		$content .= OrionTools::linef('');
		foreach ($schema->tables->table as $table)
		{
			$content .= OrionTools::linef('$this->getTable("' . strtolower($table->name) . '")->init();', 2);
		}
		$content .= OrionTools::linef('}', 1);
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('}');

		FileSystem::writeFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $db . 'databasebase.php', $content, false);


		if (!FileSystem::checkFile(ORION_MODELS_DIR . '/' . $db . '/class.' . $db . '.php'))
		{
			CommandLineHandler::line("Creating base php class for table: " . ucfirst($db) . '.' . ucfirst($table->name));
			$content = OrionTools::linef('<?php');
			$content .= OrionTools::linef('');
			$content .= OrionTools::linef('class ' . ucfirst($db) . 'Database extends ' . ucfirst($db) . 'DatabaseBase');
			$content .= OrionTools::linef('{');
			$content .= OrionTools::linef('');
			$content .= OrionTools::linef('}');
			FileSystem::writeFile(ORION_MODELS_DIR . '/' . $db . '/database.' . $db . 'database.php', $content, false);
		}
	}

	/**
	 * Creates php classes for a given database tables
	 * @param $schema
	 * @param $db
	 * @throws IncorrectRowDefinitionException
	 * @throws RowNameNotValidException
	 */
	private function createTableClasses($schema, $db)
	{
		$table = strtolower($schema->name);
		$db = strtolower($db);
		CommandLineHandler::line("Creating php base class for table: " . ucfirst($db) . '.' . ucfirst($table), 1);

		if (FileSystem::checkFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $table . 'tablebase.php'))
			FileSystem::deleteFile(ORION_MODELS_DIR . '/' . $db . '/base/base.table.' . $table . 'tablebase.php');

		$content = OrionTools::linef('<?php');
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('/**');
		$content .= OrionTools::linef('* This file has been auto-generated by Orion ORM');
		$content .= OrionTools::linef('* WARNING : Please do not edit or erase it');
		$content .= OrionTools::linef('*/');
		$content .= OrionTools::linef('abstract class ' . ucfirst($table) . 'TableBase extends Table');
		$content .= OrionTools::linef('{');
		$content .= OrionTools::linef('protected static $db_name = \'' . strtolower($db) . '\';', 1);
		$content .= OrionTools::linef('protected static $tbl_name = \'' . strtolower($table) . '\';', 1);
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('public function __construct()', 1);
		$content .= OrionTools::linef('{', 1);
		$content .= OrionTools::linef('parent::__construct("' . $table . '", Database::getDatabase("' . $db . '")' . (isset($schema->engine) ? ', "' . $schema->engine . '"' : ', ""') . (isset($schema->charset) ? ', "' . $schema->charset . '"' : '""') . (isset($schema->collate) ? ', "' . $schema->collate . '"' : '') . ');', 2);
		$content .= OrionTools::linef('}', 1);
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('public function init()', 1);
		$content .= OrionTools::linef('{', 1);
		$content .= OrionTools::linef('$this->addRow("id", RowType::INT, false, "", true, true);', 2);
		foreach ($schema->rows->row as $row)
		{
			$att = $row->attributes();

			if (!isset($att['name']) || !isset($att['type']))
				throw(new IncorrectRowDefinitionException("You must set the name and type attributes for each row."));
			if ($att['name'] === 'id')
				throw(new RowNameNotValidException("[id] is not a valid row name. The [id] row is automatically added to every tables as a PRIMARY AUTO_INCREMENT INT row."));


			$row_content = '$this->addRow("' . strtolower($att['name']) . '", RowType::' . strtoupper($att['type']) . ', ';
			$row_content .= isset($att['null']) && $att['null'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['default']) && $att['default'] ? '"' . ($att['default']) . '", ' : '"", ';
			$row_content .= isset($att['autoIncrement']) && $att['autoIncrement'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['primary']) && $att['primary'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['length']) && $att['length'] ? '"' . ($att['length']) . '", ' : '"", ';
			$row_content .= isset($att['comment']) && $att['comment'] ? '"' . ($att['comment']) . '", ' : '"", ';
			$row_content .= isset($att['reference']) && $att['reference'] ? '"' . ($att['reference']) . '", ' : '"", ';
			$row_content .= isset($att['unsigned']) && $att['unsigned'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['zerofill']) && $att['zerofill'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['binary']) && $att['binary'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['ascii']) && $att['ascii'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['unicode']) && $att['unicode'] ? 'true, ' : 'false, ';
			$row_content .= isset($att['enum']) && $att['enum'] ? '"' . ($att['enum']) . '", ' : '"", ';
			$row_content .= isset($att['set']) && $att['set'] ? '"' . ($att['set']) . '");' : '"");';
			$content .= OrionTools::linef($row_content, 2);
		}
		$content .= OrionTools::linef('');
		if (isset($schema->relations))
		{
			foreach ($schema->relations->relation as $relation)
			{
				$att = $relation->attributes();
				$content .= OrionTools::linef('$this->addRelation(RelationType::' . $att['type'] . ',  Database::getDatabase("' . $db . '")->getTable("' . strtolower($att['table']) . '"), "' . strtolower($att['local']) . '",  "' . strtolower($att['distant']) . '",  "' . strtolower($att['alias']) . '", RelationActions::' . (isset($att['onDelete']) ? strtoupper($att['onDelete']) : 'NO_ACTION') . ', RelationActions::' . (isset($att['onUpdate']) ? strtoupper($att['onUpdate']) : 'NO_ACTION') . ');', 2);
			}
		}
		$content .= OrionTools::linef('');
		if (isset($schema->indexes))
		{
			foreach ($schema->indexes->index as $index)
			{
				$att = $index->attributes();
				$content .= OrionTools::linef('$this->addIndex("' . $att['name'] . '", IndexType::' . strtoupper($att['type']) . ',  "' . $att['fields'] . '");', 2);
			}
		}
		$content .= OrionTools::linef('}', 1);
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('}');
		FileSystem::writeFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $table . 'tablebase.php', $content, false);

		// -- table class file :
		if (!FileSystem::checkFile(ORION_MODELS_DIR . '/' . $db . '/table.' . $table . 'table.php'))
		{
			CommandLineHandler::line("Creating php class for table: " . ucfirst($db) . '.' . ucfirst($table), 1);
			$content = OrionTools::linef('<?php');
			$content .= OrionTools::linef('');
			$content .= OrionTools::linef('class ' . ucfirst($table) . 'Table extends ' . ucfirst($table) . 'TableBase');
			$content .= OrionTools::linef('{');
			$content .= OrionTools::linef('', 1);
			$content .= OrionTools::linef('}');
			FileSystem::writeFile(ORION_MODELS_DIR . '/' . $db . '/table.' . $table . 'table.php', $content, false);
		}

		CommandLineHandler::line("Creating php base class for record: " . ucfirst($db) . '.' . ucfirst($table), 1);

		if (FileSystem::checkFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $table . 'base.php'))
			FileSystem::deleteFile(ORION_MODELS_DIR . '/' . $db . '/base/base.table.' . $table . 'base.php');

		$content = OrionTools::linef('<?php');
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('/**');
		$content .= OrionTools::linef('* This file has been auto-generated by Orion ORM');
		$content .= OrionTools::linef('* WARNING : Please do not edit or erase it');
		$content .= OrionTools::linef('*/');
		$content .= OrionTools::linef('abstract class ' . ucfirst($table) . 'Base extends Record');
		$content .= OrionTools::linef('{');
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('public function __construct($_id = 0)', 1);
		$content .= OrionTools::linef('{');
		$content .= OrionTools::linef('parent::__construct("' . $table . '", Database::getDatabase("' . $db . '")->getTable("' . $table . '"), $_id);', 2);
		$content .= OrionTools::linef('}');
		$content .= OrionTools::linef('');
		$content .= OrionTools::linef('}');
		FileSystem::writeFile(ORION_MODELS_DIR . '/' . $db . '/base/base.' . $table . 'base.php', $content, false);

		// -- Record class file :
		if (!FileSystem::checkFile(ORION_MODELS_DIR . '/' . $db . '/record.' . $table . '.php'))
		{
			CommandLineHandler::line("Creating php class for record: " . ucfirst($db) . '.' . ucfirst($table), 1);
			$content = OrionTools::linef('<?php');
			$content .= OrionTools::linef('');
			$content .= OrionTools::linef('class ' . ucfirst($table) . ' extends ' . ucfirst($table) . 'Base');
			$content .= OrionTools::linef('{');
			$content .= OrionTools::linef('', 1);
			$content .= OrionTools::linef('}');
			FileSystem::writeFile(ORION_MODELS_DIR . '/' . $db . '/record.' . $table . '.php', $content, false);
		}
	}

	public function getName()
	{
		return 'BuildDatabase';
	}

	public function getDescription()
	{
		return 'Read xml database schema file for each database directory found in the models directory, and build MySQL schema accordingly.';
	}

}